// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Not(in = instruction[15], out = notop);
	Mux16(a = aluout1, b = instruction, sel = notop, out = out1); // A-instruction -> sel = 1, value
								       // loaded into the A-register
								       // C-instruction -> sel = 0, 
								       // computed value (ALU out) is
								       // loaded into A-register

	Or(a = notop, b = instruction[5], out = Adestbit);
	ARegister(in = out1, load = Adestbit, out = A, out[0..14] = addressM); // A-register
	
	And(a = instruction[12], b = instruction[15], out = ac); // check if C-instruction and if a-bit asserted
	Mux16(a = A, b = inM, sel = ac, out = AorM); // Choose A or M

	ALU(x = D, y = AorM, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = aluout1, out = outM, zr = zr, ng = ng); //ALU
	
	And(a = instruction[4], b = instruction[15], out = Ddestbit); // check if C-instruction and if d2 is asserted
	DRegister(in = aluout1, load = Ddestbit, out = D); // D-register
	
	And(a = instruction[3], b = instruction[15], out = writeM); // If C-instruction and if d3 is asserted, assert writeM
	
	Not(in = ng, out = pos);
	Not(in = zr, out = nzr);
	And(a = instruction[15], b=instruction[0], out = JGT); // Checks if C-instruction and j3 is asserted
	And(a = instruction[15], b=instruction[1], out = JEQ); // Checks if C-instruction and j2 is asserted
	And(a = instruction[15], b=instruction[2], out = JLT); // Checks if C-instruction and j1 is asserted
	And(a = pos, b = nzr, out = posnzr); // Check if computed value is positive and != 0
	And(a = JGT, b = posnzr, out = load1); // Checks if JGT is true
	And(a = JEQ, b = zr, out = load2); // Checks if JEQ is true
	And(a = JLT, b = ng, out = load3); //Checks if JLT is true
	
	Or(a = load1, b = load2, out = load4);
	Or(a = load3, b = load4, out = load5);
	PC(in = A, load = load5, inc = true, reset = reset, out[0..14] = pc);
}